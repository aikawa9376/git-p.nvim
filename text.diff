diff --git a/rplugin/sran/git-p/src/util/index.ts b/rplugin/sran/git-p/src/util/index.ts
index 73f61ca..10f4f55 100644
--- a/rplugin/sran/git-p/src/util/index.ts
+++ b/rplugin/sran/git-p/src/util/index.ts
@@ -3 +2,0 @@
-git plus for (neo)vim
@@ -7,0 +7 @@ with vim-plug:
+hello owrld
@@ -11 +11 @@ Plug 'iamcco/sran.nvim'
-Plug 'iamcco/git-p.nvim'
+Pug 'iamcco/git-p.nvim'
@@ -12,0 +13,2 @@ Plug 'iamcco/git-p.nvim'
+
+end line
diff --git a/rplugin/sran/git-p/src/types/index.ts b/rplugin/sran/git-p/src/types/index.ts
index 9920fbd..5556121 100644
--- a/rplugin/sran/git-p/src/types/index.ts
+++ b/rplugin/sran/git-p/src/types/index.ts
@@ -2,0 +3,4 @@ import fs from 'fs';
+export type Diff = {
+  [key: string]: boolean | '~'
+}
+
diff --git a/rplugin/sran/git-p/src/util/index.ts b/rplugin/sran/git-p/src/util/index.ts
index 73f61ca..edbdec6 100644
--- a/rplugin/sran/git-p/src/util/index.ts
+++ b/rplugin/sran/git-p/src/util/index.ts
@@ -2 +2 @@ import { execFile } from 'child_process';
-import { GitParams } from '../types';
+import { GitParams, Diff } from '../types';
@@ -61 +61 @@ export async function gitHunk(params: GitParams): Promise<any> {
-    resolve(diff)
+    resolve(parseDiff(diff))
@@ -69,0 +70,51 @@ export function gitBlame(params: GitParams): Promise<any> {
+
+function recordLineNum(diff: Diff, startLine: number, len: number, isAdd: boolean) {
+  for (let index = 0; index < len; index++) {
+    const lineNum = startLine + index
+    if (diff[lineNum] === !isAdd) {
+      diff[lineNum] = '~'
+    } else {
+      diff[lineNum] = isAdd
+    }
+  }
+  return diff
+}
+
+/**
+ * parse diff string to Diff
+ */
+export function parseDiff(diffStr: string): Diff {
+  const lines = diffStr.split('\n').slice(4)
+  return lines.reduce((diff, next) => {
+    if (!next.startsWith('@@')) {
+      return diff
+    }
+
+    let info = next.split('@@', 2)[1]
+    if (!info) {
+      return diff
+    }
+
+    const [deletes, adds] = info
+      .trim()
+      .split(' ')
+      .map(str => str.slice(1).split(','))
+
+    if (deletes[1] !== '0') {
+      diff = recordLineNum(
+        diff,
+        parseInt(deletes[0]), parseInt(`${deletes[1] || 1}`),
+        false
+      )
+    }
+
+    if (adds[1] !== '0') {
+      diff = recordLineNum(
+        diff,
+        parseInt(adds[0]), parseInt(`${adds[1] || 1}`),
+        true
+      )
+    }
+    return diff
+  }, {})
+}
diff --git a/rplugin/sran/git-p/src/types/index.ts b/rplugin/sran/git-p/src/types/index.ts
index 9920fbd..5556121 100644
--- a/rplugin/sran/git-p/src/types/index.ts
+++ b/rplugin/sran/git-p/src/types/index.ts
@@ -2,0 +3,4 @@ import fs from 'fs';
+export type Diff = {
+  [key: string]: boolean | '~'
+}
+
diff --git a/rplugin/sran/git-p/src/util/index.ts b/rplugin/sran/git-p/src/util/index.ts
index 73f61ca..edbdec6 100644
--- a/rplugin/sran/git-p/src/util/index.ts
+++ b/rplugin/sran/git-p/src/util/index.ts
@@ -2 +2 @@ import { execFile } from 'child_process';
-import { GitParams } from '../types';
+import { GitParams, Diff } from '../types';
@@ -61 +61 @@ export async function gitHunk(params: GitParams): Promise<any> {
-    resolve(diff)
+    resolve(parseDiff(diff))
@@ -69,0 +70,51 @@ export function gitBlame(params: GitParams): Promise<any> {
+
+function recordLineNum(diff: Diff, startLine: number, len: number, isAdd: boolean) {
+  for (let index = 0; index < len; index++) {
+    const lineNum = startLine + index
+    if (diff[lineNum] === !isAdd) {
+      diff[lineNum] = '~'
+    } else {
+      diff[lineNum] = isAdd
+    }
+  }
+  return diff
+}
+
+/**
+ * parse diff string to Diff
+ */
+export function parseDiff(diffStr: string): Diff {
+  const lines = diffStr.split('\n').slice(4)
+  return lines.reduce((diff, next) => {
+    if (!next.startsWith('@@')) {
+      return diff
+    }
+
+    let info = next.split('@@', 2)[1]
+    if (!info) {
+      return diff
+    }
+
+    const [deletes, adds] = info
+      .trim()
+      .split(' ')
+      .map(str => str.slice(1).split(','))
+
+    if (deletes[1] !== '0') {
+      diff = recordLineNum(
+        diff,
+        parseInt(deletes[0]), parseInt(`${deletes[1] || 1}`),
+        false
+      )
+    }
+
+    if (adds[1] !== '0') {
+      diff = recordLineNum(
+        diff,
+        parseInt(adds[0]), parseInt(`${adds[1] || 1}`),
+        true
+      )
+    }
+    return diff
+  }, {})
+}
